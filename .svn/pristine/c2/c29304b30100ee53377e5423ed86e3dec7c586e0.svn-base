

import nibabel as nib
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import math
import matplotlib.pyplot as plt
import scipy.optimize
import functools

class classtest():
    def __init__(self):
        print 'initie'
        

    def test(self):
        self.c=np.zeros((5,5))
        self.D = np.memmap('C:\\Users\\LiomW17\\Desktop\\test\\testvalidateimage.dat',dtype='uint16',mode='w+',shape=(5,5))
        self.D[:,:]=self.c
    
    def destructeurtest(self):
        print self.c
        del self.c
        del self.D
    
    def takememmap(self):
        self.c = np.memmap('C:\\Users\\LiomW17\\Desktop\\test\\testvalidateimage.dat',dtype='uint16',mode='w+',shape=(5,5))
        
    '''
    ----------------------------------------------------------------------------------------------------------------------
    '''    
    def plane(self,x, y, params):
        a = params[0]
        b = params[1]
        c = params[2]
        z = a*x + b*y + c
        return z

    def error(self,params, points):
        result = 0
        for (x,y,z) in points:
            plane_z = self.plane(x, y, params)
            diff = abs(plane_z - z)
            result += diff**2
        return result
        
    def cross(self,a, b):
        return [a[1]*b[2] - a[2]*b[1],
                a[2]*b[0] - a[0]*b[2],
                a[0]*b[1] - a[1]*b[0]]    
        
        
    def planemodelling(self,datas):
        
        points= datas
        
        fun = functools.partial(self.error, points=points)
        params0 = [0, 0, 0]
        res = scipy.optimize.minimize(fun, params0)

        a = res.x[0]
        b = res.x[1]
        c = res.x[2]

        xs, ys, zs = zip(*points)

        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')

        ax.scatter(xs, ys, zs)

        point  = np.array([0.0, 0.0, c])
        normal = np.array(self.cross([1,0,a], [0,1,b]))
        d = -point.dot(normal)
        xx, yy = np.meshgrid([-5,10], [-5,10])
        z = (-normal[0] * xx - normal[1] * yy - d) * 1. /normal[2]
        ax.plot_surface(xx, yy, z, alpha=0.2, color=[0,1,0])

        ax.set_xlim(-10,10)
        ax.set_ylim(-10,10)
        ax.set_zlim(  0,10)

        plt.show()
    
    
    
    
    
    
    
        
class Imgtesting():
    def __init__(self):
        print 'initie'
        
        
    def downloadimage(self,filocation):
        
        self.img=nib.load(filocation)
        self.imgdata= self.img.get_data()
        
        return self.imgdata
    
    def plotmeanxy(self,image):
        self.image=image
        self.Imgmeanxy=np.mean(self.image,axis=(0,1))
        
        
    def testingprogram(self,b,precheck):
        
        self.matrixofcalcul = np.array((-1,0,1))
        m=0
        for i in range(10):
            for j in range(10):
                if precheck[j,i] == 1 :
                    mainnumber=b[j,i]
                    print mainnumber
                    neighbors = np.ravel(np.zeros((1,10)))
                    for k in range(3):
                        for l in range(3):
                            if k!=1 or l!=1 :
                                
                                
                                if j+self.matrixofcalcul[k] == -1 or i+self.matrixofcalcul[l] == -1:
                                               
                                    if j+self.matrixofcalcul[k] == -1 :
                                        neighbors[m] = b[j+self.matrixofcalcul[k]+1,i+self.matrixofcalcul[l]]
                                                    
                                                    
                                    if i+self.matrixofcalcul[l] == -1 :
                                        neighbors[m] = b[j+self.matrixofcalcul[k],i+self.matrixofcalcul[l]+1]
                                        
                                else:
                                    
                                    try:
                                        neighbors[m] = b[j+self.matrixofcalcul[k],i+self.matrixofcalcul[l]] #adresse mirroir
                                        print 'k=', k
                                        print 'l=', l
                                        print 'self.matrixofcalcul[k]=', self.matrixofcalcul[k]
                                        print 'self.matrixofcalcul[l]=', self.matrixofcalcul[l]
                                        print 'neighbors[m]=', neighbors[m]
                                        print 'm=',m
                                        print ''                
                                        
                                    except:
                                        neighbors[m] = 0.
                                        
                                m=m+1       
                    print neighbors
                    neighbors_list = neighbors.tolist()
                    self.remove_values_from_list(neighbors_list, 0.)
                    neighbors = np.asarray(neighbors_list)
                    print neighbors
                    m=0
                    if len(neighbors)<=6 and len(neighbors)>=2:
                        meanneighbors=np.mean(neighbors, axis=0)
                        print meanneighbors
                        if meanneighbors!=mainnumber:
                            m = int(meanneighbors / (0.04))
                            m = float(m*((0.04)))
                            b[j,i] = m
                            print b[j,i]
                m=0    
        
    def remove_values_from_list(self,the_list, val):
        while val in the_list:
            the_list.remove(val)   
            
            
            
    '''     
import numpy as np
from base import testeur

    
    
      
b=np.array([[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],[0.,0.,0.,-12.16,-12.08,0.,0.,0.,0.,0.],[0.,-12.12,-12.12,-12.12,-12.08,-12.04,-12.08,0.,0.,0.],[0.,-12.12,-12.12,-12.08,-12.04,-12.04,-12.04,0.,0.,0.],[0.,-12.08,-12.04,-12.04,-12.04,-12.04,-12.04,-12.08,0.,0.],[0.,0.,-12.,-12.,-12.04,-12.,-12.04,-12.04,0.,0.],[0.,0.,-12.,-12.,-12.,-12.,-12.,0.,0.,0.],[0.,0.,0.,-12.16, -12.,-12.,0.,0.,0.,0.],[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]])
precheck = np.zeros((10,10))
for i in range(10):
    for j in range(10):
        precheck[j,i]=int(b[j,i]/-12)

G=testeur.Imgtesting()
G.testingprogram(b, precheck)


    '''
    
    
    
    
    
    