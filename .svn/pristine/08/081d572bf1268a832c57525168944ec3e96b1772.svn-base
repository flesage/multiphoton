# -*- coding: utf-8 -*-
"""
Created on Mon Aug 31 10:48:31 2015

@author: flesage
"""
import threading
import time
import math
from main import config
from PyQt4 import QtGui
from PyQt4.QtGui import QWidget
from ui_galvos_form import Ui_GalvosForm
from base import liomio
from base.liomio import NiiStackSaver

class GalvosController(QWidget, Ui_GalvosForm):
    def __init__(self):
        QWidget.__init__(self)

        # Set up the user interface from Designer.
        self.setupUi(self)
        self.saving=False
        # Change in any data
        validator=QtGui.QIntValidator(1,3000,self)
        self.lineEdit_nx.setValidator(validator)
        self.lineEdit_ny.setValidator(validator)
        self.lineEdit_width.setValidator(validator)
        self.lineEdit_height.setValidator(validator)
        validator2=QtGui.QIntValidator(1,200,self)
        self.lineEdit_extrapoints.setValidator(validator2)
        validator3=QtGui.QIntValidator(1,32,self)
        self.lineEdit_fastaxisrepeat.setValidator(validator3)
        self.lineEdit_linerate.setValidator(validator)
        validator4=QtGui.QIntValidator(0,100,self)
        self.lineEdit_laser_power1.setValidator(validator4)
        self.lineEdit_laser_power1.editingFinished.connect(self.set_power1)
        self.lineEdit_laser_power2.setValidator(validator4)
        self.lineEdit_laser_power2.editingFinished.connect(self.set_power2)
        
        self.ending=False
        self.firstcut=True
        self.maxapt= False
        self.firstcutaccepted=False
        self.slice=0
        
        self.comboBox_scantype.activated.connect(self.scantype_chosen)
        
        # Start and stop scans
        self.pushButton_start.clicked.connect(self.startscan)
        self.pushButton_stop.clicked.connect(self.stopscan)   
        
        self.pushButton_center.clicked.connect(self.move_center)
        self.pushButton_down.clicked.connect(self.move_down)
        self.pushButton_right.clicked.connect(self.move_right)
        self.pushButton_up.clicked.connect(self.move_up)
        self.pushButton_left.clicked.connect(self.move_left)
        self.pushButton_start3d.clicked.connect(self.take_stack)
        self.pushButton_settop.clicked.connect(self.set_top)
        self.pushButton_motor_up.clicked.connect(self.move_motor_up)
        self.pushButton_mozaic.clicked.connect(self.start_mozaic)
        self.pushButton_motor_down.clicked.connect(self.move_motor_down)
        self.pushButton_ZaberX_left.clicked.connect(self.move_ZaberX_left)
        self.pushButton_ZaberX_right.clicked.connect(self.move_ZaberX_right)
        self.pushButton_ZaberY_left.clicked.connect(self.move_ZaberY_left)
        self.pushButton_ZaberY_right.clicked.connect(self.move_ZaberY_right) 
        self.pushButton_init.clicked.connect(self.initialisation)
        self.pushButton_exitprogram.clicked.connect(self.vibratomeprotocol)
        self.pushButton_Settopleft.clicked.connect(self.set_topleft) 
        self.pushButton_Setbottomright.clicked.connect(self.set_bottomright)  
        self.pushButton_shutter.clicked.connect(self.swapshutter)
        self.shutter_closed = True                      
        self.galvos=None
        self.center_x=0.0
        self.center_y=0.0
        self.stopped = True
        self.t1 = None
        self.topleft= None
        self.bottomright= None
        self.power_motor = None

    def setShutter(self,shutter):
        self.shutter = shutter   
    
    def swapshutter(self):
        if self.shutter_closed:
            self.shutter.on()
            self.shutter_closed = False
        else:
            self.shutter.off() 
            self.shutter_closed = True
         
    def setGalvos(self,galvos):
        self.galvos=galvos
        
    def setMotors(self,motors):
        self.motors=motors
        
    def setZaber(self,zaber):
        self.zaber=zaber
        
    def setVibratome(self,vibratome):
        self.vibratome = vibratome
        
    def setThorlabs(self,thorlabs):
        self.thorlabs=thorlabs        
        
    def setMeas(self,meas):
        self.meas=meas
        
    def setPowerMotor(self,power_motor):
        self.power_motor = power_motor
        
        # Assuming Home is zero intensity
        #self.power_motor.goHome()
        
    def set_power1(self): 
        percent = float(self.lineEdit_laser_power1.text())
        #calib = 7*math.pi/45
        calib = 23*math.pi/45
        deg=float((45/math.pi)*(math.asin(2*percent/100-1)+math.pi/2+calib))
        print deg
        self.power_motor.goTo_abs(1, deg)
                
    def set_power2(self): 
        percent = float(self.lineEdit_laser_power2.text())
        #calib = 7*math.pi/45
        calib = 23*math.pi/45
        deg=float((45/math.pi)*(math.asin(2*percent/100-1)+math.pi/2+calib))
        print deg
        self.power_motor.goTo_abs(2, deg)
                        
    def startscan(self):
        
        # Read values
        nx=int(self.lineEdit_nx.text())    
        ny=int(self.lineEdit_ny.text())          
        width=float(self.lineEdit_width.text())          
        height=float(self.lineEdit_height.text())         
        n_extra=float(self.lineEdit_extrapoints.text())
        n_repeat=int(self.lineEdit_fastaxisrepeat.text())
        line_rate=float(self.lineEdit_linerate.text())

        # Set ramp
        if self.comboBox_scantype.currentText() == 'SawTooth':
            self.galvos.setSawToothRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,n_repeat,line_rate)
        elif self.comboBox_scantype.currentText() == 'Triangular':
            self.galvos.setTriangularRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,n_repeat,line_rate)
        elif self.comboBox_scantype.currentText() == 'Line':          
            self.galvos.setLineRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,line_rate)
        # Start generating
        self.stopped = False
        self.galvos.startTask()

    def take_stack(self):    
                # Read values
        nx=int(self.lineEdit_nx.text())    
        ny=int(self.lineEdit_ny.text())          
        width=float(self.lineEdit_width.text())          
        height=float(self.lineEdit_height.text())         
        n_extra=float(self.lineEdit_extrapoints.text())
        n_repeat=int(self.lineEdit_fastaxisrepeat.text())
        line_rate=float(self.lineEdit_linerate.text())
        
        # set acquisition to be finite
        self.galvos.setFinite(True)
        
        # Set ramp
        if self.comboBox_scantype.currentText() == 'SawTooth':
            self.galvos.setSawToothRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,n_repeat,line_rate)
        elif self.comboBox_scantype.currentText() == 'Triangular':
            self.galvos.setTriangularRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,n_repeat,line_rate)
        elif self.comboBox_scantype.currentText() == 'Line':          
            self.galvos.setLineRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,line_rate)
            
        self.saving = True
        
        if self.saving:
            n_steps = int(self.lineEdit_nstack.text())
            nii_saver = liomio.NiiStackSaver(config.filelocation,nx,ny,n_steps,n_extra)
            self.meas.setDataConsumer(nii_saver,True,1)
            
            
        self.t1 = threading.Thread(target=self.stack_thread)
        self.t1.start()    

    def set_top(self):
        
        self.top=float(self.motors.get_pos().replace(',', ', '))
        print(self.top)
    
    def stack_thread(self):
        # Start taking the stack
        # Step one: Move motor to top position 

        self.move_motor_top(self.top)
        # Step two: Start stack loop
        zstep=float(self.lineEdit_zstep.text())
        n_steps = int(self.lineEdit_nstack.text())
        
        for k in range(n_steps):
            # Take 2D image and saving
            self.stepinz = k
            self.take_stack()
            # Move z motors
            self.motors.move_dx(zstep/1000)
            
            if self.stopped:
                break
                        
        self.galvos.setFinite(False)
        
    def start_mozaic(self):
        
        while self.ending is False:
        
            # Find topright, find topleft set by buttons
            width=float(self.lineEdit_width.text())         
            height=float(self.lineEdit_height.text())  
            mwidth=self.bottomright[0]-self.topleft[0]   
            print mwidth 
            mheight=self.bottomright[1]-self.topleft[1]
            print mheight  
            xstep=0.8*width   #in microns in interface
            ystep=0.8*height   #in microns in interface
            nstepx=mwidth/xstep
            print nstepx
            nstepy=mheight/ystep
            print nstepy

            # Compute scan positions (e.g. 3x3mm avec obj qui voit width et height)
            # Calcule positions avec 20% overlap xstep = 0.8*width, ystep = 0.8*height
            for i in range(int(math.ceil(nstepy))):
                for j in range(int(math.ceil(nstepx))):
                    self.zaber.move_x(self.zaber.microstepsize*(self.topleft[0]/1000+j*ystep/1000))
                    self.stepiny= i
                    self.stepinx= j
                    self.stack_thread()                
                self.zaber.move_y(self.zaber.microstepsize*(self.topleft[1]/1000+i*xstep/1000))
                
            self.vibratomeprotocol()
            self.slice= self.slice + 1
            # Loop     Move x, y to each pos
            # Call stack-thread
            # Save volume avec nom du type: volume_xi_yi.tiff
        
    def stopscan(self):
        self.stopped = True
        if self.t1 is not None:
            self.t1.join()
            self.t1=None
        self.galvos.stopTask()
        
    def scantype_chosen(self,text):
        self.galvos.stopTask()
        if text=='Sawtooth':
            self.label_nx.setText('Nx')
            self.label_ny.setText('Ny')
        elif text=='Triangular':
            self.label_nx.setText('Nx')
            self.label_ny.setText('Ny')            
        elif text=='Line':
            self.label_nx.setText('N points')
            self.label_ny.setText('N repeat')
            
    def move_up(self):
        height=float(self.lineEdit_height.text())     
        self.center_y=self.center_y-height/25
        self.galvos.move(self.center_x,self.center_y)
        
    def move_down(self):
        height=float(self.lineEdit_height.text())     
        self.center_y=self.center_y+height/25
        self.galvos.move(self.center_x,self.center_y)

    def move_right(self):
        width=float(self.lineEdit_width.text())          
        self.center_x=self.center_x-width/25
        self.galvos.move(self.center_x,self.center_y)

    def move_left(self):
        width=float(self.lineEdit_width.text())          
        self.center_x=self.center_x+width/25
        self.galvos.move(self.center_x,self.center_y)

    def move_center(self):
        self.center_x=0.0
        self.center_y=0.0
        self.galvos.move(self.center_x,self.center_y)

        
    def move_motor_up(self):
        
        dx_up=float(self.lineEdit_z_motor_step.text())
        self.motors.move_dx(dx_up/1000)
        
    def move_motor_down(self):
        dx_down=float(self.lineEdit_z_motor_step.text())
        self.motors.move_dx(-dx_down/1000)
        
    def move_motor_top(self,top):
        self.motors.move_dx(top)
        
    def move_ZaberX_left(self):
        posX=[-float(self.lineEdit_Zaber_step.text())*10,0]
        self.zaber.goTo(posX)

    def move_ZaberX_right(self):
        posX=[float(self.lineEdit_Zaber_step.text())*10,0]
        self.zaber.goTo(posX)
        
    def move_ZaberY_left(self):
        
        posY=[0,-float(self.lineEdit_Zaber_step.text())*10]
        self.zaber.goTo(posY)        
        
    def move_ZaberY_right(self):
        posY=[0,float(self.lineEdit_Zaber_step.text())*10]
        self.zaber.goTo(posY)
    
        
    def initialisation(self):
        self.thorlabs.goHome()
        self.zaber.goHome()
        
    def exitprogram(self):
        self.thorlabs.cleanUpAPT()
        self.sys.exit(0)
        
    def vibratomeprotocol(self):

        if self.ending is False :
            self.zaber.move_y(config.posycoupe)
            self.zaber.move_x(config.posxcoupeinit)
            
            if self.maxapt :
                print('Fin de sequence')
                self.ending=True
            elif self.firstcut:
                while self.firstcutaccepted is not True:
                    self.firstcut= input('Enter starting position in absolute (mm): ')
                    self.thorlabs.mAbs(self.firstcut)
                    self.firstcutaccepted = input('Is the position okay? (False or True) : ')
                
                self.firstcut=False
                self.vibratome.bladefrequency(3000)
            else:
                self.thorlabs.mRel(0.2)
            
                self.vibratome.bladefrequency(3000)
        
        
            print(self.zaber.possx,config.maxzaberx)
        
            while self.zaber.possx < config.maxzaberx :
                self.zaber.motorx.move_vel(1000.0)
                self.zaber.getposs()
            
            else :    
                self.vibratome.bladefrequency(0)
            
                self.zaber.move_x(config.posycoupe)
        
    def set_topleft(self):
        self.topleft=self.zaber.getPos()
    
    def set_bottomright(self):
        self.bottomright=self.zaber.getPos()

    #def decidingtosave(self):
        #self.saving = True
        #print('self.saving = True')