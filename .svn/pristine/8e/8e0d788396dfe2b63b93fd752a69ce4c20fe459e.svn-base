import serial
import time
import binary
import APTMotor
from serial import SerialException


#This script is used to control the 2photon microscope Z axis motor
class Motorsclass:
    def __init__(self,comPort,baud):
        self.comPort = comPort
        self.baud=baud

        self.ser=serial.Serial(port=self.comPort, baudrate=self.baud, parity=serial.PARITY_NONE,
        stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS,timeout=1,writeTimeout=1)
        self.ser.write('1MO\r')
        
        #self.ser.write('2MO\r')
        #self.ser.write('3MO\r')
    
    def home(self):
#        Wait until homing is done to return from this function to
#        make sure we have accurate positioning
        #Motor 1
        self.ser.write('1OR0\r')
        done=0
        while not done:                
                self.ser.write('1MD?\r')
                done = self.ser.read(4);
                time.sleep(1)
#        #Motor 2
#        print('Homing Y Motor')
#        done=0
#        self.ser.write('2OR0')
#        while not done:
#                self.ser.write('2MD?')
#                done = self.ser.fscanf(self.ser,'%d');
#                time.sleep(1)
#        #Motor 3
#        print('Homing Z Motor')
#        done=0
#        self.ser.write('3OR0')
#        while not done:
#                self.ser.write('3MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(1)

#        Center each motor in the center of their stride
                
        #Motor 1
        self.move_dx(-12.5)
        #self.ser.write('1PA12.5\r')
        #while not done:
        #        self.ser.write('1MD?\r')
        #        done = self.ser.read(4);
        #        time.sleep(1)
#        #Motor 2
#        print('Homing Y Motor')
#        done=0
#        self.ser.write('1PA12.5')
#        while not done:
#                self.ser.write('2MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(1)
#        #Motor 3
#        print('Homing Z Motor')
#        done=0
#        self.ser.write('3PA0.95')
#        while not done:
#                self.ser.write('3MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(1)
        
    def move_dx(self,dx):
        self.ser.write('1PR'+str(dx)+'\r')
        data=0
        while not data:
            self.ser.write('1MD?\r')
            data = self.ser.read(4);
            time.sleep(0.1)
#        def move_dy(self,dy):
#            done=0
#            self.ser.write(['2PR',str(dy)])
#            while not done:
#                self.ser.write('2MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(0.1)        
#        def move_dz(self,dz):
#            done=0
#            self.ser.write(['3PR',str(dz)])
#            while not done:
#                self.ser.write('3MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(0.1)    
        
    def move_ax(self,x_pos):
        data=0
        self.ser.write(['1PR',str(x_pos)])
        while not data:
            self.ser.write('1MD?')
            data = self.ser.read();
            time.sleep(0.1)
#        def move_ay(self,y_pos):
#            done=0
#            self.ser.write(['2PR',str(y_pos)])
#            while not done:
#                self.ser.write('2MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(0.1)        
#        def move_az(self,z_pos):
#            self.ser.write(['3PR',str(z_pos)])
#            done=0
#            while not done:
#                self.ser.write('3MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(0.1)  
                
        def get_pos(self):
            self.ser.write('1TP')
            x = self.ser.read()
            return x
            #self.ser.write('2TP')
#             y = self.ser.read()
#             self.ser.write('3TP')
#             z = self.ser.read()
        def delete(self):
            self.ser.write('1MF')
#             self.ser.write('2MF')
#             self.ser.write('3MF')
            
            self.ser.close()
            self.ser.delete()
            
            
""" This class contains all the linear Zaber connected in series. If there are
 more or less motors than presently (x and y), it is simply possible to 
 add them to the class attributes as a new BinaryDevice instance. 
 https://www.zaber.com/products/product_detail.php?detail=T-LSR150B """
class ZaberMotor():
    def __init__(self,comport):
        try:
            self.ser = binary.BinarySerial(comport)
            self.motorx = binary.BinaryDevice(self.ser, 1)
            self.motory = binary.BinaryDevice(self.ser, 2)
            self.microstepsize=0.49609375
            
            
        except SerialException:
            print('Port already open, motor instances not created')
            
    def getPos(self):
        pos = [0, 0]
        pos[0] = self.motorx.get_pos()  #in number of microsteps
        pos[1] = self.motory.get_pos()
        return pos
    
    def goHome(self):
        print('Moving motors home...')
        self.motorx.home()
        self.motory.home()
        
    def goTo(self, pos):
        self.motorx.move_rel(pos[0]*1000/self.microstepsize)   #enter displacement in mm
        self.motory.move_rel(pos[1]*1000/self.microstepsize)
    
    def goTo_abs(self, pos):
        self.motorx.move_abs(pos[0]*1000/self.microstepsize)   #enter displacement in mm
        self.motory.move_abs(pos[1]*1000/self.microstepsize)
        
    def move_x(self,pos):
        self.motorx.move_abs(pos*1000/self.microstepsize)      #enter displacement in mm
        
    def move_y(self,pos):
        self.motory.move_abs(pos*1000/self.microstepsize)      #enter displacement in mm
        
class RotationMotor():   
    def __init__(self,comport):
        try:
            self.ser = binary.BinarySerial(comport)
            self.motor = binary.BinaryDevice(self.ser, 2)
            self.micro_step_size = 0.000234375;
            try:
                self.goHome()
            except:
                pass
        except SerialException:
            print('Port already open, motor instances not created')
    def getPos(self):
        pos = self.motor.get_pos()
        return pos
    
    def goHome(self):
        try:
            self.motor.home()
        except:
            pass
        
    def goTo(self, angle_deg):
        try:
            self.motor.move_rel(angle_deg/self.micro_step_size)
        except:
            pass
    
    def goTo_abs(self, angle_deg):
        try:
            self.motor.move_abs(angle_deg/self.micro_step_size)
        except:
            pass
                   
""" This class holds the code to initialize and use a ThorLabs LabJack motor.
 Plenty more methods of moving the motor and getting information are available
 when using the APTMotor instance directly.  """
class ThorLabMotor(APTMotor.APTMotor):
    def __init__(self, SN, HWTYPE):
        super(ThorLabMotor, self).__init__(SN, HWTYPE)
#        self.motor =  APTMotor.APTMotor(SN, HWTYPE) # SN and motor type
#        self.motor.initializeHardwareDevice()
        self.initializeHardwareDevice()
       
    def goHome(self):
        self.mAbs(0.0)
                            