import serial
import time
#This script is used to control the 2photon microscope Z axis motor
class Motorsclass:
    def __init__(self,comPort,deviceName,lineID,baud):
        self.comPort = comPort
        self.baud=baud
        self.deviceName=deviceName
        self.deviceName=lineID

#Defines and opens serial port

    def Motorsclass(self,comPort)  :
        self.ser=serial.Serial(port=self.comPort, baudrate=self.baud, parity=serial.PARITY_NONE,
        stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS,timeout=1,writeTimeout=1)
        self.ser.write('1MO\r')
        self.ser.write('2MO\r')
        self.ser.write('3MO\r')
    
    def home(self):
#        Wait until homing is done to return from this function to
#        make sure we have accurate positionning
        #Motor 1
        print('Homing X Motor') 
        self.ser.write('1OR0\r')
        data=0
        while not data:                
                self.ser.write('1MD?\r')
                data = self.ser.read(4);
                print('Received ' + str(len(data)) + 'bytes. Data:' + str(data))
                time.sleep(1)
#        #Motor 2
#        print('Homing Y Motor')
#        done=0
#        self.ser.write('2OR0')
#        while not done:
#                self.ser.write('2MD?')
#                done = self.ser.fscanf(self.ser,'%d');
#                time.sleep(1)
#        #Motor 3
#        print('Homing Z Motor')
#        done=0
#        self.ser.write('3OR0')
#        while not done:
#                self.ser.write('3MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(1)
##        Center each motor in the center of their stride
                
        #Motor 1
        print('Homing X Motor') 
        self.ser.write('1PA12.5\r')
        while not data:
                self.ser.write('1MD?\r')
                data = self.ser.read(4);
                print('Received ' + str(len(data)) + 'bytes. Data:' + str(data))
                time.sleep(1)
#        #Motor 2
#        print('Homing Y Motor')
#        done=0
#        self.ser.write('1PA12.5')
#        while not done:
#                self.ser.write('2MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(1)
#        #Motor 3
#        print('Homing Z Motor')
#        done=0
#        self.ser.write('3PA0.95')
#        while not done:
#                self.ser.write('3MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(1)
        
    def move_dx(self,dx):
        self.ser.write('1PR'+str(dx)+'\r')
        data=0
        while not data:
            self.ser.write('1MD?\r')
            data = self.ser.read(4);
            time.sleep(0.1)
#        def move_dy(self,dy):
#            done=0
#            self.ser.write(['2PR',str(dy)])
#            while not done:
#                self.ser.write('2MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(0.1)        
#        def move_dz(self,dz):
#            done=0
#            self.ser.write(['3PR',str(dz)])
#            while not done:
#                self.ser.write('3MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(0.1)    
        
    def move_ax(self,x_pos):
        data=0
        self.ser.write(['1PR',str(x_pos)])
        while not data:
            self.ser.write('1MD?')
            data = self.ser.read();
            time.sleep(0.1)
#        def move_ay(self,y_pos):
#            done=0
#            self.ser.write(['2PR',str(y_pos)])
#            while not done:
#                self.ser.write('2MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(0.1)        
#        def move_az(self,z_pos):
#            self.ser.write(['3PR',str(z_pos)])
#            done=0
#            while not done:
#                self.ser.write('3MD?')
#                done = self.ser.fscanf('%d');
#                time.sleep(0.1)  
                
        def get_pos(self):
            self.ser.write('1TP')
            x = self.ser.read()
            self.ser.write('2TP')
#             y = self.ser.read()
#             self.ser.write('3TP')
#             z = self.ser.read()
        def delete(self):
            self.ser.write('1MF')
#             self.ser.write('2MF')
#             self.ser.write('3MF')
            
            self.ser.close()
            self.ser.delete()