# -*- coding: utf-8 -*-
"""
Created on Mon Aug 31 10:48:31 2015

@author: flesage
"""
import threading
from PyQt4 import QtGui
from PyQt4.QtGui import QWidget
from ui_galvos_form import Ui_GalvosForm
class GalvosController(QWidget, Ui_GalvosForm):
    def __init__(self):
        QWidget.__init__(self)

        # Set up the user interface from Designer.
        self.setupUi(self)
        
        # Change in any data
        validator=QtGui.QIntValidator(1,3000,self)
        self.lineEdit_nx.setValidator(validator)
        self.lineEdit_ny.setValidator(validator)
        self.lineEdit_width.setValidator(validator)
        self.lineEdit_height.setValidator(validator)
        validator2=QtGui.QIntValidator(1,200,self)
        self.lineEdit_extrapoints.setValidator(validator2)
        validator3=QtGui.QIntValidator(1,32,self)
        self.lineEdit_fastaxisrepeat.setValidator(validator3)
        self.lineEdit_linerate.setValidator(validator)

        
        self.comboBox_scantype.activated.connect(self.scantype_chosen)
        
        # Start and stop scans
        self.pushButton_start.clicked.connect(self.startscan)
        self.pushButton_stop.clicked.connect(self.stopscan)   
        
        self.pushButton_center.clicked.connect(self.move_center)
        self.pushButton_down.clicked.connect(self.move_down)
        self.pushButton_right.clicked.connect(self.move_right)
        self.pushButton_up.clicked.connect(self.move_up)
        self.pushButton_left.clicked.connect(self.move_left)
        self.pushButton_start3d.clicked.connect(self.take_stack)
        self.pushButton_motor_up.clicked.connect(self.move_motor_up)
        self.pushButton_motor_down.clicked.connect(self.move_motor_down)
        self.galvos=None
        self.center_x=0.0
        self.center_y=0.0
        self.stopped = True
        self.t1 = None
        
    def setGalvos(self,galvos):
        self.galvos=galvos
        
    def setMotors(self,motors):
        self.motors=motors
        
    def startscan(self):
        
        # Read values
        nx=int(self.lineEdit_nx.text())    
        ny=int(self.lineEdit_ny.text())          
        width=float(self.lineEdit_width.text())          
        height=float(self.lineEdit_height.text())         
        n_extra=float(self.lineEdit_extrapoints.text())
        n_repeat=int(self.lineEdit_fastaxisrepeat.text())
        line_rate=float(self.lineEdit_linerate.text())
        
        # Set ramp
        if self.comboBox_scantype.currentText() == 'SawTooth':
            self.galvos.setSawToothRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,n_repeat,line_rate)
        elif self.comboBox_scantype.currentText() == 'Triangular':
            self.galvos.setTriangularRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,n_repeat,line_rate)
        elif self.comboBox_scantype.currentText() == 'Line':          
            self.galvos.setLineRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,line_rate)
        # Start generating
        self.stopped = False
        self.galvos.startTask()

    def take_stack(self):    
                # Read values
        nx=int(self.lineEdit_nx.text())    
        ny=int(self.lineEdit_ny.text())          
        width=float(self.lineEdit_width.text())          
        height=float(self.lineEdit_height.text())         
        n_extra=float(self.lineEdit_extrapoints.text())
        n_repeat=int(self.lineEdit_fastaxisrepeat.text())
        line_rate=float(self.lineEdit_linerate.text())
        
        # set acquisition to be finite
        self.galvos.setFinite(True)
        
        # Set ramp
        if self.comboBox_scantype.currentText() == 'SawTooth':
            self.galvos.setSawToothRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,n_repeat,line_rate)
        elif self.comboBox_scantype.currentText() == 'Triangular':
            self.galvos.setTriangularRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,n_repeat,line_rate)
        elif self.comboBox_scantype.currentText() == 'Line':          
            self.galvos.setLineRamp(self.center_x-width/2,self.center_y-height/2,self.center_x+width/2,self.center_y+height/2,nx,ny,n_extra,line_rate)
        
        self.t1 = threading.Thread(target=self.stack_thread)
        self.t1.start()    

    def stack_thread(self):
        
        # Start taking the stack
        # Step one: Move motor to top position
        
        # Step two: Start stack loop
        zstep=int(self.lineEdit_zstep.text())
        n_steps = int(self.lineEdit_nstack.text())
        
        for i in range(n_steps):
            # Take 2D image
            self.galvos.startTask()
            # Move z motors
            print 'Moving motors: ', i
            self.motors.move_dx(-zstep/1000)
            
            if self.stopped:
                break
                        
        self.galvos.setFinite(False)
        
    def stopscan(self):
        self.stopped = True
        if self.t1 is not None:
            self.t1.join()
            self.t1=None
        self.galvos.stopTask()
        
    def scantype_chosen(self,text):
        self.galvos.stopTask()
        if text=='Sawtooth':
            self.label_nx.setText('Nx')
            self.label_ny.setText('Ny')
        elif text=='Triangular':
            self.label_nx.setText('Nx')
            self.label_ny.setText('Ny')            
        elif text=='Line':
            self.label_nx.setText('N points')
            self.label_ny.setText('N repeat')
            
    def move_up(self):
        height=float(self.lineEdit_height.text())     
        self.center_y=self.center_y-height/25
        self.galvos.move(self.center_x,self.center_y)
        
    def move_down(self):
        height=float(self.lineEdit_height.text())     
        self.center_y=self.center_y+height/25
        self.galvos.move(self.center_x,self.center_y)

    def move_right(self):
        width=float(self.lineEdit_width.text())          
        self.center_x=self.center_x-width/25
        self.galvos.move(self.center_x,self.center_y)

    def move_left(self):
        width=float(self.lineEdit_width.text())          
        self.center_x=self.center_x+width/25
        self.galvos.move(self.center_x,self.center_y)

    def move_center(self):
        self.center_x=0.0
        self.center_y=0.0
        self.galvos.move(self.center_x,self.center_y)
        
    def move_motor_up(self):
        
        dx_up=float(self.lineEdit_z_motor_step.text())
        print dx_up/1000
        self.motors.move_dx(dx_up/1000)
        
    def move_motor_down(self):
        dx_down=float(self.lineEdit_z_motor_step.text())
        self.motors.move_dx(-dx_down/1000)

