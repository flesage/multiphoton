# -*- coding: utf-8 -*-
"""
Created on Sat Sep 12 12:09:59 2015

@author: flesage
"""

"""
Created on Sat Sep 12 07:58:44 2015

@author: flesage
"""

import posixpath
import numpy as np
import h5py
import nibabel as nb
from Queue import Empty
from multiprocessing import Process, Queue, Pipe

class DataSaver():
    def __init__(self,filename):

        self.filename=filename
        self.f = h5py.File(filename, 'a')
        self.datasetname = 'dummy'
        self.block_size = 512

    def setBlockSize(self,block_size):

        self.block_size = block_size
        if block_size < 512:
            block_size = 512
        self.queue = Queue(2*block_size)

    def setDatasetName(self,dataset_name):

        self.datasetname = dataset_name
        self.f.create_group(posixpath.join('/scans',self.datasetname))

    def addAttribute(self,attribute,value):
        self.f[posixpath.join('/scans',self.datasetname)].attrs[attribute]=value

    def startSaving(self):

        # Thread to display so that the puts in queue are very fast
        self.f.close()
        self.parent_conn, child_conn = Pipe()
        self.p = Process(target=save_process,args=(self.queue,self.block_size,self.datasetname,child_conn,self.filename))
        self.p.start()
        return self.parent_conn

    def stopSaving(self):
        # Stop saving, join save thread and clear data in queue to prepare
        # for next round
        self.parent_conn.send([False])
        self.p.join()
        self.queue = Queue(2*self.block_size)

    def put(self,value,flag):
        self.queue.put(value,flag)

def save_process(queue,block_size,datasetname,conn,filename):

    f = h5py.File(filename, 'a')
    save_index = 0
    index = 0
    started = True

    while started:
        try:
            # We block for 2 seconds on no data to optimize CPU and avoid
            # running this while loop for no reason
            data = queue.get(True,1)
            # Create data buffer
            if index == 0:
                buf=np.zeros((data.shape[0],data.shape[1],block_size),dtype='int16')
            buf[:,:,index]=data
            index = (index + 1) % block_size
            if index == 0:
                f[posixpath.join('/scans',datasetname,'scan'+u'%05d' % save_index)]=buf
                save_index = save_index + 1
                conn.send([save_index,queue.qsize()])
        except Empty:
            if conn.poll():
                started = conn.recv()[0]
            # Reloop
            pass
    # Save last acquisition if incomplete (duplicate if exactly complete?)
    f[posixpath.join('/scans',datasetname,'scan'+u'%05d' % save_index)]=buf
    f.close()


class NiiStackSaver():
    def __init__(self,filename,nx,ny,nz):
        self.z_index = 0
        self.nz = nz
        self.filename=filename
        self.data = np.zeros((nx,ny,nz))

    def put(self,data,flag):
        self.data[:,:,self.z_index] = data
        print 'Received on frame'
        if self.z_index == self.nz-1:
            # Sauve
            self.z_index = 0

